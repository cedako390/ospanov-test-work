import PropTypes from 'prop-types';
import { useState, useEffect } from 'react';
import { Button, Modal, Grid, TextInput, Select } from '@mantine/core';
import { useForm } from '@mantine/form';
import { notifications } from '@mantine/notifications';
import axios from 'axios';
import styles from './Card.module.scss';

const SpecializationCard = ({ specialization, updateList }) => {
    const [opened, setOpened] = useState(false);
    const [deleteOpened, setDeleteOpened] = useState(false);
    const [faculties, setFaculties] = useState([]);
    const [loading, setLoading] = useState(false);

    const form = useForm({
        initialValues: {
            name: specialization.name,
            facultyId: `${specialization.facultyId}`,
        },
        validate: {
            name: (value) => (value ? null : '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏'),
            facultyId: (value) => (value ? null : '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç'),
        },
    });

    useEffect(() => {
        const fetchFaculties = async () => {
            try {
                const response = await axios.get('/faculties?page=-1');
                setFaculties(response.data.data);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤:', error);
            }
        };

        fetchFaculties();
    }, []);

    const handleSubmit = async (values) => {
        setLoading(true);
        try {
            await axios.put(`/specializations/${specialization.id}`, values);
            notifications.show({
                title: '–£—Å–ø–µ—Ö!',
                message: '–î–∞–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.',
                color: 'green',
                position: 'top-right',
            });
            setOpened(false);
            updateList();
        } catch (error) {
            console.log(error)
            notifications.show({
                title: '–û—à–∏–±–∫–∞',
                message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.',
                color: 'red',
                position: 'top-right',
            });
        } finally {
            setLoading(false);
        }
    };

    const deleteCard = async () => {
        try {
            await axios.delete(`/specializations/${specialization.id}`);
            notifications.show({
                title: '–£—Å–ø–µ—Ö!',
                message: '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.',
                color: 'green',
                position: 'top-right',
            });
            setDeleteOpened(false);
            updateList();
        } catch (error) {
            console.log(error)
            notifications.show({
                title: '–û—à–∏–±–∫–∞',
                message: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å.',
                color: 'red',
                position: 'top-right',
            });
        }
    };

    return (
        <div className={styles.card}>
            <div className={styles.stack}>
                <div className={styles.group}>
                    <span className={styles.label}>üìò –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:</span>
                    <span className={styles.value}>{specialization.name}</span>
                </div>

                <div className={styles.group}>
                    <span className={styles.label}>üèõ –§–∞–∫—É–ª—å—Ç–µ—Ç:</span>
                    <span className={styles.value}>{specialization.facultyName}</span>
                </div>
                <div className={styles.group}>
                    <Button onClick={() => setOpened(true)} variant="outline" className={styles.editButton}>
                        –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </Button>
                    <Button onClick={() => setDeleteOpened(true)} variant="filled" className={styles.deleteButton}>
                        –£–¥–∞–ª–∏—Ç—å
                    </Button>
                </div>
            </div>

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è */}
            <Modal
                opened={deleteOpened}
                onClose={() => setDeleteOpened(false)}
                title="–£–¥–∞–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"
            >
                <div className={styles.deleteModal}>
                    <div>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å {specialization.name}?</div>
                    <div className={styles.actions}>
                        <Button onClick={deleteCard} variant="outline">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</Button>
                        <Button onClick={() => setDeleteOpened(false)} variant="filled">–Ø –ø–µ—Ä–µ–¥—É–º–∞–ª</Button>
                    </div>
                </div>
            </Modal>

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
            <Modal
                opened={opened}
                onClose={() => setOpened(false)}
                title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å"
            >
                <form onSubmit={form.onSubmit(handleSubmit)}>
                    <Grid>
                        <Grid.Col span={12}>
                            <TextInput
                                label="–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"
                                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"
                                {...form.getInputProps('name')}
                            />
                        </Grid.Col>
                        <Grid.Col span={12}>
                            <Select
                                label="–§–∞–∫—É–ª—å—Ç–µ—Ç"
                                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç"
                                data={faculties.map((faculty) => ({
                                    value: `${faculty.id}`,
                                    label: faculty.name,
                                }))}
                                {...form.getInputProps('facultyId')}
                            />
                        </Grid.Col>
                        <Grid.Col span={12}>
                            <Button type="submit" fullWidth loading={loading}>
                                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                            </Button>
                        </Grid.Col>
                    </Grid>
                </form>
            </Modal>
        </div>
    );
};

SpecializationCard.propTypes = {
    specialization: PropTypes.shape({
        id: PropTypes.number.isRequired,
        name: PropTypes.string.isRequired,
        facultyName: PropTypes.string.isRequired,
        facultyId: PropTypes.string.isRequired,
    }).isRequired,
    updateList: PropTypes.func.isRequired,
};

export { SpecializationCard };
