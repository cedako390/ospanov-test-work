import PropTypes from "prop-types";
import styles from './Card.module.scss'
import {useForm} from "@mantine/form";
import {Button, Grid, Modal, Select, TextInput} from "@mantine/core";
import {notifications} from "@mantine/notifications";
import axios from "axios";
import {useEffect, useState} from "react";

const StudentCard = ({student, updateList}) => {
    const [opened, setOpened] = useState(false);
    const [deleteOpened, setDeleteOpened] = useState(false);
    const [faculties, setFaculties] = useState([]);
    const [specializations, setSpecializations] = useState([]);
    const [loading, setLoading] = useState(false);

    const form = useForm({
        initialValues: {
            lastName: student.lastName,
            firstName: student.firstName,
            middleName: student.middleName,
            facultyId: `${student.facultyId}`,
            specializationId: `${student.specializationId}`,
        },
        validate: {
            lastName: (value) => (value ? null : '–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é'),
            firstName: (value) => (value ? null : '–í–≤–µ–¥–∏—Ç–µ –∏–º—è'),
            facultyId: (value) => (value ? null : '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç'),
            specializationId: (value) => (value ? null : '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å'),
        },
    });
    const fetchFaculties = async () => {
        const response = await axios.get('/faculties?page=-1');
        setFaculties(response.data.data);
    };

    const fetchSpecializations = async () => {
        const response = await axios.get('/specializations?page=-1');
        setSpecializations(response.data.data);
    };

    useEffect(() => {
        fetchFaculties();
        fetchSpecializations();
    }, []);

    const handleSubmit = async (values) => {
        setLoading(true);
        try {
            await axios.put(`/students/${student.id}`, values);
            notifications.show({
                title: '–£—Å–ø–µ—Ö!',
                message: '–î–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.',
                color: 'green',
                position: 'top-right',
            });
            setOpened(false);
            updateList()
        } catch (error) {
            notifications.show({
                title: '–û—à–∏–±–∫–∞',
                message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞.',
                color: 'red',
                position: 'top-right',
            });
        } finally {
            setLoading(false);
        }
    };

    const deleteCard = () => {
        axios.delete(`/students/${student.id}`).then(() => {
            setDeleteOpened(false);
            notifications.show({
                title: '–£—Å–ø–µ—Ö!',
                message: '–ö–æ–Ω—Ç–µ–Ω—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω',
                color: 'green',
                position: 'top-right',
            })
            updateList()
        })
    }

    return (
        <div className={styles.card}>
            <div className={styles.stack}>
                <div className={styles.group}>
                    <span className={styles.label}>–§–∞–º–∏–ª–∏—è:</span>
                    <span className={styles.value}>{student.lastName}</span>
                </div>

                <div className={styles.group}>
                    <span className={styles.label}>–ò–º—è:</span>
                    <span className={styles.value}>{student.firstName}</span>
                </div>

                <div className={styles.group}>
                    <span className={styles.label}>–û—Ç—á–µ—Å—Ç–≤–æ:</span>
                    <span className={styles.value}>{student.middleName || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}</span>
                </div>

                <div className={styles.group}>
                    <span className={styles.label}>üéì –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:</span>
                    <span className={styles.value}>{student.specializationName}</span>
                </div>

                <div className={styles.group}>
                    <span className={styles.label}>üìö –§–∞–∫—É–ª—å—Ç–µ—Ç:</span>
                    <span className={styles.value}>{student.facultyName}</span>
                </div>

                <div className={styles.group}>
                    <Button onClick={() => setOpened(true)} variant="outline" className={styles.editButton}>
                        –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </Button>
                    <Button onClick={() => setDeleteOpened(true)} variant={"filled"} className={styles.deleteButton}>
                        –£–¥–∞–ª–∏—Ç—å
                    </Button>
                </div>
            </div>
            <Modal
                opened={deleteOpened}
                onClose={() => setDeleteOpened(false)}
                title={"–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"}>
                <div className={styles.deleteModal}>
                    <div>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞ {student.firstName} {student.lastName}?</div>
                    <div className={styles.actions}>
                        <Button onClick={deleteCard} variant={"outline"}>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</Button>
                        <Button onClick={() => setDeleteOpened(false)} variant={'filled'}>–Ø –ø–µ—Ä–µ–¥—É–º–∞–ª</Button>
                    </div>
                </div>
            </Modal>
            <Modal
                opened={opened}
                onClose={() => setOpened(false)}
                title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞"
            >
                <form onSubmit={form.onSubmit(handleSubmit)}>
                    <Grid>
                        <Grid.Col span={12}>
                            <TextInput
                                label="–§–∞–º–∏–ª–∏—è"
                                placeholder="–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é"
                                {...form.getInputProps('lastName')}
                            />
                        </Grid.Col>
                        <Grid.Col span={12}>
                            <TextInput
                                label="–ò–º—è"
                                placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è"
                                {...form.getInputProps('firstName')}
                            />
                        </Grid.Col>
                        <Grid.Col span={12}>
                            <TextInput
                                label="–û—Ç—á–µ—Å—Ç–≤–æ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
                                placeholder="–í–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ"
                                {...form.getInputProps('middleName')}
                            />
                        </Grid.Col>
                        <Grid.Col span={12}>
                            <Select
                                label="–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å"
                                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å"
                                data={specializations.map((spec) => ({value: `${spec.id}`, label: spec.name}))}
                                {...form.getInputProps('specializationId')}
                            />
                        </Grid.Col>
                        <Grid.Col span={12}>
                            <Select
                                label="–§–∞–∫—É–ª—å—Ç–µ—Ç"
                                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç"
                                data={faculties.map((faculty) => ({value: `${faculty.id}`, label: faculty.name}))}
                                {...form.getInputProps('facultyId')}
                            />
                        </Grid.Col>
                        <Grid.Col span={12}>
                            <Button type="submit" fullWidth loading={loading}>
                                –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞
                            </Button>
                        </Grid.Col>
                    </Grid>
                </form>
            </Modal>
        </div>
    )
};

StudentCard.propTypes = {
    student: PropTypes.shape({
        id: PropTypes.number.isRequired,
        lastName: PropTypes.string.isRequired,
        firstName: PropTypes.string.isRequired,
        middleName: PropTypes.string,
        facultyName: PropTypes.string.isRequired,
        specializationName: PropTypes.string.isRequired,
        specializationId: PropTypes.string.isRequired,
        facultyId: PropTypes.string.isRequired,
    }).isRequired,
};

export {StudentCard};
